diff --git a/src/Decoder.mo b/src/Decoder.mo
index 7c1ba8e..e00af75 100644
--- a/src/Decoder.mo
+++ b/src/Decoder.mo
@@ -1,5 +1,5 @@
-import NatX "mo:xtendedNumbers/NatX";
-import FloatX "mo:xtendedNumbers/FloatX";
+import NatX "mo:xtended-numbers/NatX";
+import FloatX "mo:xtended-numbers/FloatX";
 import Blob "mo:base/Blob";
 import Buffer "mo:base/Buffer";
 import Debug "mo:base/Debug";
@@ -87,7 +87,7 @@ module {
         case (#ok(#indef)) return #err(#invalid("Major type 1 does not support 31 for additional bits"));
         case (#err(x)) return #err(x);
       };
-      
+
       let intValue: Int = convertBitsToInt(value);
       #ok(#majorType1(intValue));
     };
@@ -171,7 +171,7 @@ module {
       };
       #ok(#majorType4(buffer.toArray()));
     };
-    
+
     private func parseMajorType5(additionalBits: Nat8) : Result.Result<Value.Value, Errors.DecodingError> {
       let map_size: Nat64 = switch(getAdditionalBitsValue(additionalBits)) {
         case (#ok(#num(n))) Nat64.fromNat(Nat8.toNat(n)); // Convert number to value
@@ -275,12 +275,12 @@ module {
       };
       #ok(#majorType7(#float(value)));
     };
-    
+
 
     private func parseMajorType(byte: Nat8) : (Nat8, Nat8) {
       let majorType : Nat8 = (byte >> 5) & 0x07; // Get first 3 bits
       let additionalBits : Nat8 = byte & 0x1F; // Get last 5 bits
-      (majorType, additionalBits); 
+      (majorType, additionalBits);
     };
 
     private func readByte() : ?Nat8 {
@@ -322,7 +322,7 @@ module {
             if (majorType != t) {
               return #err(#invalid("Major type " # Nat8.toText(majorType) # " expected, got " # Nat8.toText(t)));
             };
-            
+
             let bytes = switch(readBytes(Nat8.toNat(additionalBits))) {
               case (null) return #err(#unexpectedEndOfBytes);
               case (?v) v;
@@ -395,7 +395,7 @@ module {
       // 25 => read 2 more bytes for value
       // 26 => read 4 more bytes for value
       // 27 => read 8 more bytes for value
-      
+
       if(additionalBits <= 23){
         return #ok(#num(additionalBits));
       };
@@ -418,4 +418,4 @@ module {
     }
 
   };
-}
\ No newline at end of file
+}
diff --git a/src/Encoder.mo b/src/Encoder.mo
index 0cf5c89..b061efe 100644
--- a/src/Encoder.mo
+++ b/src/Encoder.mo
@@ -1,5 +1,5 @@
-import NatX "mo:xtendedNumbers/NatX";
-import FloatX "mo:xtendedNumbers/FloatX";
+import NatX "mo:xtended-numbers/NatX";
+import FloatX "mo:xtended-numbers/FloatX";
 import Blob "mo:base/Blob";
 import Buffer "mo:base/Buffer";
 import Debug "mo:base/Debug";
@@ -24,7 +24,7 @@ module {
     switch (encodeToBuffer(buffer, value)) {
       case (#ok) #ok(buffer.toArray());
       case (#err(e)) #err(e);
-    }    
+    }
   };
 
   public func encodeToBuffer(buffer: Buffer.Buffer<Nat8>, value: Value.Value) : Result.Result<(), Errors.EncodingError> {
@@ -198,4 +198,4 @@ module {
     encodeRaw(buffer, majorType, additionalBits, additionalBytes);
   };
 
-};
\ No newline at end of file
+};
diff --git a/src/Errors.mo b/src/Errors.mo
index 195c0c7..d6e814e 100644
--- a/src/Errors.mo
+++ b/src/Errors.mo
@@ -1,4 +1,4 @@
-import FloatX "mo:xtendedNumbers/FloatX";
+import FloatX "mo:xtended-numbers/FloatX";
 
 module {
   public type DecodingError = {
@@ -10,4 +10,4 @@ module {
   public type EncodingError = {
     #invalidValue: Text;
   };
-}
\ No newline at end of file
+}
diff --git a/src/Value.mo b/src/Value.mo
index e658b89..b7c1c54 100644
--- a/src/Value.mo
+++ b/src/Value.mo
@@ -1,4 +1,4 @@
-import FloatX "mo:xtendedNumbers/FloatX";
+import FloatX "mo:xtended-numbers/FloatX";
 
 module {
   public type Value = {
@@ -21,4 +21,4 @@ module {
       #_break;
     };
   };
-}
\ No newline at end of file
+}
